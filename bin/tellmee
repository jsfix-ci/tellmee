#!/usr/bin/env node

require = require("esm")(module /*, options*/);
const { Command } = require("commander");
const program = new Command();
const chalk = require("chalk");
const version = require("../package").version;
const data = require("../lib/data");
const { about } = require("../lib/about");

// Waiting for update and notify
require("../lib/update_notifier");

program.on("option:*", function (operands) {
  console.log("Command tellme");
  process.exitCode = 1;
});

program.on("command:*", function (operands) {
  const availableCommands = program.commands.map((cmd) => cmd.name());

  unknownCommand(availableCommands, operands[0]);
});

/* TODO: JSFIX could not patch the breaking change:
TypeScript declaration for .addHelpText() callback no longer allows result of undefined, now just string 
Suggested fix: Only breaking if the 2nd argument 'text' of addHelpText() might return undefined: The type of addHelpText() has been changed. To accommodate this return an appropriate string instead. */
/* TODO: JSFIX could not patch the breaking change:
TypeScript declaration for .addHelpText() callback no longer allows result of undefined, now just string 
Suggested fix: Only breaking if the 2nd argument 'text' of addHelpText() might return undefined: The type of addHelpText() has been changed. To accommodate this return an appropriate string instead. */
/* TODO: JSFIX could not patch the breaking change:
TypeScript declaration for .addHelpText() callback no longer allows result of undefined, now just string 
Suggested fix: Only breaking if the 2nd argument 'text' of addHelpText() might return undefined: The type of addHelpText() has been changed. To accommodate this return an appropriate string instead. */
program
  .name("tellmee")
  .usage("[options] <command>")
  .description("Command line tellmee tool")
  .version("v" + version, "-v, --version", "Show version")
  .helpOption("-h, --help", "Show usage information")
  .addHelpText("beforeAll", " ")
  .addHelpText("after", "\ntellmee <command> -h   Quick help on <command>")
  .addHelpText("after", `\ntellmee@${version}`)
  .addHelpCommand(false)
  .allowExcessArguments(false);

// Joke Command
program
  .command("joke")
  .alias("j")
  .description("Show random joke")
  .option(
    "--lang <language>",
    "show random joke according to the language \n→ support (en|fr)",
    "en"
  )
  .option(
    "--cat <category>",
    "show random joke according to a specific category" +
      "\n→ english support () " +
      "\n→ french support (global|dev|dark|limit|beauf|blondes)",
    "any"
  )
  .option("--no-color", "show random joke without any color")
  .action((opts) => jokeCommand(opts));

// Quote Command
program
  .command("quote")
  .alias("q")
  .description("Show random quote")
  .option("--no-color", "show random quote without any color")
  .action((opts) => quoteCommand(opts));

// Inspire Command
program
  .command("inspire")
  .alias("i")
  .description("Show random inspire quote")
  .option("--no-color", "show random inspire without any color")
  .action((opts) => inspireCommand(opts));

// Number Command
program
  .command("number")
  .alias("n")
  .description("Show interesting facts about numbers")
  .option(
    "--type <type>",
    "type is one of trivia, math, date, or year",
    "trivia"
  )
  .option(
    "--num <integer>",
    "For which we will try to show a random available fact (eg. --num=68) or" +
      " a day of year in the form 'month/day' (eg. --num=2/29) if type is date"
  )
  .action((opts) => numberCommand(opts));

// About cli Command
program
  .command("about")
  .alias("a")
  .description("About tellmee cli")
  .action(() => about());

program.parse(process.argv);

/**
 * Handle joke command
 *
 * @param options
 */
function jokeCommand(options) {
  // console.log(options);
  let hasCat = () => options.cat !== "any";
  let isFrench = () => options.lang === "fr";

  if (isFrench()) {
    // French joke logic

    if (!hasCat()) {
      data.getFrenchJoke(options.color);
    } else {
      data.getFrenchJokeByType(options.cat, options.color);
    }
  } else {
    // English joke logic

    data.getJoke(options.color);
  }
}

/**
 * Handle quote command
 *
 * @param options
 */
async function quoteCommand(options) {
  // console.log(options);

  data.getQuote(options.color);
}

/**
 * Handle inspire command
 *
 * @param options
 */
function inspireCommand(options) {
  // console.log(options);

  data.getInspire(options.color);
}

/**
 * Handle number command
 *
 * @param options
 */
function numberCommand(options) {
  if (options.num) {
    data.getCustomNumber(options.num);
  } else {
    data.getRandomNumber(options.type);
  }
}

/**
 * Handle unknown command
 *
 * @param {[String]} commands Available commands
 * @param {String} operands unknown command
 */
function unknownCommand(commands, operands) {
  console.error(
    `
  ${chalk.red.bold("Error:")} unknown command '${operands}'

  Available commands: ${chalk.green.bold(commands)}
    `
  );

  process.exit(1);
}
